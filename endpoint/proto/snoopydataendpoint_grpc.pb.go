// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataEndpointClient is the client API for DataEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataEndpointClient interface {
	ExportPodData(ctx context.Context, opts ...grpc.CallOption) (DataEndpoint_ExportPodDataClient, error)
}

type dataEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewDataEndpointClient(cc grpc.ClientConnInterface) DataEndpointClient {
	return &dataEndpointClient{cc}
}

func (c *dataEndpointClient) ExportPodData(ctx context.Context, opts ...grpc.CallOption) (DataEndpoint_ExportPodDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataEndpoint_ServiceDesc.Streams[0], "/protobuf.DataEndpoint/ExportPodData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataEndpointExportPodDataClient{stream}
	return x, nil
}

type DataEndpoint_ExportPodDataClient interface {
	Send(*PodData) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type dataEndpointExportPodDataClient struct {
	grpc.ClientStream
}

func (x *dataEndpointExportPodDataClient) Send(m *PodData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataEndpointExportPodDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataEndpointServer is the server API for DataEndpoint service.
// All implementations must embed UnimplementedDataEndpointServer
// for forward compatibility
type DataEndpointServer interface {
	ExportPodData(DataEndpoint_ExportPodDataServer) error
	mustEmbedUnimplementedDataEndpointServer()
}

// UnimplementedDataEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedDataEndpointServer struct {
}

func (UnimplementedDataEndpointServer) ExportPodData(DataEndpoint_ExportPodDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportPodData not implemented")
}
func (UnimplementedDataEndpointServer) mustEmbedUnimplementedDataEndpointServer() {}

// UnsafeDataEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataEndpointServer will
// result in compilation errors.
type UnsafeDataEndpointServer interface {
	mustEmbedUnimplementedDataEndpointServer()
}

func RegisterDataEndpointServer(s grpc.ServiceRegistrar, srv DataEndpointServer) {
	s.RegisterService(&DataEndpoint_ServiceDesc, srv)
}

func _DataEndpoint_ExportPodData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataEndpointServer).ExportPodData(&dataEndpointExportPodDataServer{stream})
}

type DataEndpoint_ExportPodDataServer interface {
	Send(*Response) error
	Recv() (*PodData, error)
	grpc.ServerStream
}

type dataEndpointExportPodDataServer struct {
	grpc.ServerStream
}

func (x *dataEndpointExportPodDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataEndpointExportPodDataServer) Recv() (*PodData, error) {
	m := new(PodData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataEndpoint_ServiceDesc is the grpc.ServiceDesc for DataEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.DataEndpoint",
	HandlerType: (*DataEndpointServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportPodData",
			Handler:       _DataEndpoint_ExportPodData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "snoopydataendpoint.proto",
}
