// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package endpoint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataEndpointClient is the client API for DataEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataEndpointClient interface {
	SendMetadata(ctx context.Context, in *Metadata, opts ...grpc.CallOption) (*Response, error)
	Write(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Response, error)
}

type dataEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewDataEndpointClient(cc grpc.ClientConnInterface) DataEndpointClient {
	return &dataEndpointClient{cc}
}

func (c *dataEndpointClient) SendMetadata(ctx context.Context, in *Metadata, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/endpoint.DataEndpoint/SendMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEndpointClient) Write(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/endpoint.DataEndpoint/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataEndpointServer is the server API for DataEndpoint service.
// All implementations must embed UnimplementedDataEndpointServer
// for forward compatibility
type DataEndpointServer interface {
	SendMetadata(context.Context, *Metadata) (*Response, error)
	Write(context.Context, *Data) (*Response, error)
	mustEmbedUnimplementedDataEndpointServer()
}

// UnimplementedDataEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedDataEndpointServer struct {
}

func (UnimplementedDataEndpointServer) SendMetadata(context.Context, *Metadata) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetadata not implemented")
}
func (UnimplementedDataEndpointServer) Write(context.Context, *Data) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedDataEndpointServer) mustEmbedUnimplementedDataEndpointServer() {}

// UnsafeDataEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataEndpointServer will
// result in compilation errors.
type UnsafeDataEndpointServer interface {
	mustEmbedUnimplementedDataEndpointServer()
}

func RegisterDataEndpointServer(s grpc.ServiceRegistrar, srv DataEndpointServer) {
	s.RegisterService(&DataEndpoint_ServiceDesc, srv)
}

func _DataEndpoint_SendMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEndpointServer).SendMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoint.DataEndpoint/SendMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEndpointServer).SendMetadata(ctx, req.(*Metadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEndpoint_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEndpointServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoint.DataEndpoint/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEndpointServer).Write(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// DataEndpoint_ServiceDesc is the grpc.ServiceDesc for DataEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endpoint.DataEndpoint",
	HandlerType: (*DataEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMetadata",
			Handler:    _DataEndpoint_SendMetadata_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _DataEndpoint_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snoopydataendpoint.proto",
}
